// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NgsildEntityTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "NgsildEntityTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "NgsildEntity.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_NgsildEntity_type_identifier(
        TypeIdentifierPair& type_ids_NgsildEntity)
{

    ReturnCode_t return_code_NgsildEntity {eprosima::fastdds::dds::RETCODE_OK};
    return_code_NgsildEntity =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "NgsildEntity", type_ids_NgsildEntity);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_NgsildEntity)
    {
        StructTypeFlag struct_flags_NgsildEntity = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_NgsildEntity = "NgsildEntity";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_NgsildEntity;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_NgsildEntity;
        CompleteTypeDetail detail_NgsildEntity = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_NgsildEntity, ann_custom_NgsildEntity, type_name_NgsildEntity.to_string());
        CompleteStructHeader header_NgsildEntity;
        header_NgsildEntity = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_NgsildEntity);
        CompleteStructMemberSeq member_seq_NgsildEntity;
        {
            TypeIdentifierPair type_ids_id;
            ReturnCode_t return_code_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_id)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_id))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_id = 0x00000000;
            bool common_id_ec {false};
            CommonStructMember common_id {TypeObjectUtils::build_common_struct_member(member_id_id, member_flags_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_id, common_id_ec))};
            if (!common_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_id = "id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_id;
            ann_custom_NgsildEntity.reset();
            CompleteMemberDetail detail_id = TypeObjectUtils::build_complete_member_detail(name_id, member_ann_builtin_id, ann_custom_NgsildEntity);
            CompleteStructMember member_id = TypeObjectUtils::build_complete_struct_member(common_id, detail_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildEntity, member_id);
        }
        {
            TypeIdentifierPair type_ids_type;
            ReturnCode_t return_code_type {eprosima::fastdds::dds::RETCODE_OK};
            return_code_type =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_type);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_type)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_type))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_type = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_type = 0x00000001;
            bool common_type_ec {false};
            CommonStructMember common_type {TypeObjectUtils::build_common_struct_member(member_id_type, member_flags_type, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_type, common_type_ec))};
            if (!common_type_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure type member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_type = "type";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_type;
            ann_custom_NgsildEntity.reset();
            CompleteMemberDetail detail_type = TypeObjectUtils::build_complete_member_detail(name_type, member_ann_builtin_type, ann_custom_NgsildEntity);
            CompleteStructMember member_type = TypeObjectUtils::build_complete_struct_member(common_type, detail_type);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildEntity, member_type);
        }
        {
            TypeIdentifierPair type_ids_scope;
            ReturnCode_t return_code_scope {eprosima::fastdds::dds::RETCODE_OK};
            return_code_scope =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_scope);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_scope)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_scope))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_scope = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_scope = 0x00000002;
            bool common_scope_ec {false};
            CommonStructMember common_scope {TypeObjectUtils::build_common_struct_member(member_id_scope, member_flags_scope, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_scope, common_scope_ec))};
            if (!common_scope_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure scope member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_scope = "scope";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_scope;
            ann_custom_NgsildEntity.reset();
            CompleteMemberDetail detail_scope = TypeObjectUtils::build_complete_member_detail(name_scope, member_ann_builtin_scope, ann_custom_NgsildEntity);
            CompleteStructMember member_scope = TypeObjectUtils::build_complete_struct_member(common_scope, detail_scope);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildEntity, member_scope);
        }
        {
            TypeIdentifierPair type_ids_createdAt;
            ReturnCode_t return_code_createdAt {eprosima::fastdds::dds::RETCODE_OK};
            return_code_createdAt =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_createdAt);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_createdAt)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "createdAt Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_createdAt = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_createdAt = 0x00000003;
            bool common_createdAt_ec {false};
            CommonStructMember common_createdAt {TypeObjectUtils::build_common_struct_member(member_id_createdAt, member_flags_createdAt, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_createdAt, common_createdAt_ec))};
            if (!common_createdAt_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure createdAt member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_createdAt = "createdAt";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_createdAt;
            ann_custom_NgsildEntity.reset();
            CompleteMemberDetail detail_createdAt = TypeObjectUtils::build_complete_member_detail(name_createdAt, member_ann_builtin_createdAt, ann_custom_NgsildEntity);
            CompleteStructMember member_createdAt = TypeObjectUtils::build_complete_struct_member(common_createdAt, detail_createdAt);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildEntity, member_createdAt);
        }
        {
            TypeIdentifierPair type_ids_modifiedAt;
            ReturnCode_t return_code_modifiedAt {eprosima::fastdds::dds::RETCODE_OK};
            return_code_modifiedAt =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_modifiedAt);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_modifiedAt)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "modifiedAt Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_modifiedAt = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_modifiedAt = 0x00000004;
            bool common_modifiedAt_ec {false};
            CommonStructMember common_modifiedAt {TypeObjectUtils::build_common_struct_member(member_id_modifiedAt, member_flags_modifiedAt, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_modifiedAt, common_modifiedAt_ec))};
            if (!common_modifiedAt_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure modifiedAt member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_modifiedAt = "modifiedAt";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_modifiedAt;
            ann_custom_NgsildEntity.reset();
            CompleteMemberDetail detail_modifiedAt = TypeObjectUtils::build_complete_member_detail(name_modifiedAt, member_ann_builtin_modifiedAt, ann_custom_NgsildEntity);
            CompleteStructMember member_modifiedAt = TypeObjectUtils::build_complete_struct_member(common_modifiedAt, detail_modifiedAt);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildEntity, member_modifiedAt);
        }
        {
            TypeIdentifierPair type_ids_tenant;
            ReturnCode_t return_code_tenant {eprosima::fastdds::dds::RETCODE_OK};
            return_code_tenant =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_tenant);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_tenant)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_tenant))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_tenant = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_tenant = 0x00000005;
            bool common_tenant_ec {false};
            CommonStructMember common_tenant {TypeObjectUtils::build_common_struct_member(member_id_tenant, member_flags_tenant, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_tenant, common_tenant_ec))};
            if (!common_tenant_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure tenant member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_tenant = "tenant";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_tenant;
            ann_custom_NgsildEntity.reset();
            CompleteMemberDetail detail_tenant = TypeObjectUtils::build_complete_member_detail(name_tenant, member_ann_builtin_tenant, ann_custom_NgsildEntity);
            CompleteStructMember member_tenant = TypeObjectUtils::build_complete_struct_member(common_tenant, detail_tenant);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildEntity, member_tenant);
        }
        {
            TypeIdentifierPair type_ids_attributes;
            ReturnCode_t return_code_attributes {eprosima::fastdds::dds::RETCODE_OK};
            return_code_attributes =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_attributes);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_attributes)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_attributes))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_attributes = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_attributes = 0x00000006;
            bool common_attributes_ec {false};
            CommonStructMember common_attributes {TypeObjectUtils::build_common_struct_member(member_id_attributes, member_flags_attributes, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_attributes, common_attributes_ec))};
            if (!common_attributes_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure attributes member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_attributes = "attributes";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_attributes;
            ann_custom_NgsildEntity.reset();
            CompleteMemberDetail detail_attributes = TypeObjectUtils::build_complete_member_detail(name_attributes, member_ann_builtin_attributes, ann_custom_NgsildEntity);
            CompleteStructMember member_attributes = TypeObjectUtils::build_complete_struct_member(common_attributes, detail_attributes);
            TypeObjectUtils::add_complete_struct_member(member_seq_NgsildEntity, member_attributes);
        }
        CompleteStructType struct_type_NgsildEntity = TypeObjectUtils::build_complete_struct_type(struct_flags_NgsildEntity, header_NgsildEntity, member_seq_NgsildEntity);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_NgsildEntity, type_name_NgsildEntity.to_string(), type_ids_NgsildEntity))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "NgsildEntity already registered in TypeObjectRegistry for a different type.");
        }
    }
}

