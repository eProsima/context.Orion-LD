// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NgsildEntity.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__NGSILDENTITY_HPP
#define FAST_DDS_GENERATED__NGSILDENTITY_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(NGSILDENTITY_SOURCE)
#define NGSILDENTITY_DllAPI __declspec( dllexport )
#else
#define NGSILDENTITY_DllAPI __declspec( dllimport )
#endif // NGSILDENTITY_SOURCE
#else
#define NGSILDENTITY_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define NGSILDENTITY_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure NgsildEntity defined by the user in the IDL file.
 * @ingroup NgsildEntity
 */
class NgsildEntity
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NgsildEntity()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NgsildEntity()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NgsildEntity that will be copied.
     */
    eProsima_user_DllExport NgsildEntity(
            const NgsildEntity& x)
    {
                    m_id = x.m_id;

                    m_type = x.m_type;

                    m_scope = x.m_scope;

                    m_createdAt = x.m_createdAt;

                    m_modifiedAt = x.m_modifiedAt;

                    m_tenant = x.m_tenant;

                    m_attributes = x.m_attributes;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NgsildEntity that will be copied.
     */
    eProsima_user_DllExport NgsildEntity(
            NgsildEntity&& x) noexcept
    {
        m_id = std::move(x.m_id);
        m_type = std::move(x.m_type);
        m_scope = std::move(x.m_scope);
        m_createdAt = x.m_createdAt;
        m_modifiedAt = x.m_modifiedAt;
        m_tenant = std::move(x.m_tenant);
        m_attributes = std::move(x.m_attributes);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NgsildEntity that will be copied.
     */
    eProsima_user_DllExport NgsildEntity& operator =(
            const NgsildEntity& x)
    {

                    m_id = x.m_id;

                    m_type = x.m_type;

                    m_scope = x.m_scope;

                    m_createdAt = x.m_createdAt;

                    m_modifiedAt = x.m_modifiedAt;

                    m_tenant = x.m_tenant;

                    m_attributes = x.m_attributes;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NgsildEntity that will be copied.
     */
    eProsima_user_DllExport NgsildEntity& operator =(
            NgsildEntity&& x) noexcept
    {

        m_id = std::move(x.m_id);
        m_type = std::move(x.m_type);
        m_scope = std::move(x.m_scope);
        m_createdAt = x.m_createdAt;
        m_modifiedAt = x.m_modifiedAt;
        m_tenant = std::move(x.m_tenant);
        m_attributes = std::move(x.m_attributes);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x NgsildEntity object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NgsildEntity& x) const
    {
        return (m_id == x.m_id &&
           m_type == x.m_type &&
           m_scope == x.m_scope &&
           m_createdAt == x.m_createdAt &&
           m_modifiedAt == x.m_modifiedAt &&
           m_tenant == x.m_tenant &&
           m_attributes == x.m_attributes);
    }

    /*!
     * @brief Comparison operator.
     * @param x NgsildEntity object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NgsildEntity& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member id
     * @param _id New value to be copied in member id
     */
    eProsima_user_DllExport void id(
            const std::string& _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function moves the value in member id
     * @param _id New value to be moved in member id
     */
    eProsima_user_DllExport void id(
            std::string&& _id)
    {
        m_id = std::move(_id);
    }

    /*!
     * @brief This function returns a constant reference to member id
     * @return Constant reference to member id
     */
    eProsima_user_DllExport const std::string& id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport std::string& id()
    {
        return m_id;
    }


    /*!
     * @brief This function copies the value in member type
     * @param _type New value to be copied in member type
     */
    eProsima_user_DllExport void type(
            const std::string& _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function moves the value in member type
     * @param _type New value to be moved in member type
     */
    eProsima_user_DllExport void type(
            std::string&& _type)
    {
        m_type = std::move(_type);
    }

    /*!
     * @brief This function returns a constant reference to member type
     * @return Constant reference to member type
     */
    eProsima_user_DllExport const std::string& type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport std::string& type()
    {
        return m_type;
    }


    /*!
     * @brief This function copies the value in member scope
     * @param _scope New value to be copied in member scope
     */
    eProsima_user_DllExport void scope(
            const std::string& _scope)
    {
        m_scope = _scope;
    }

    /*!
     * @brief This function moves the value in member scope
     * @param _scope New value to be moved in member scope
     */
    eProsima_user_DllExport void scope(
            std::string&& _scope)
    {
        m_scope = std::move(_scope);
    }

    /*!
     * @brief This function returns a constant reference to member scope
     * @return Constant reference to member scope
     */
    eProsima_user_DllExport const std::string& scope() const
    {
        return m_scope;
    }

    /*!
     * @brief This function returns a reference to member scope
     * @return Reference to member scope
     */
    eProsima_user_DllExport std::string& scope()
    {
        return m_scope;
    }


    /*!
     * @brief This function sets a value in member createdAt
     * @param _createdAt New value for member createdAt
     */
    eProsima_user_DllExport void createdAt(
            uint64_t _createdAt)
    {
        m_createdAt = _createdAt;
    }

    /*!
     * @brief This function returns the value of member createdAt
     * @return Value of member createdAt
     */
    eProsima_user_DllExport uint64_t createdAt() const
    {
        return m_createdAt;
    }

    /*!
     * @brief This function returns a reference to member createdAt
     * @return Reference to member createdAt
     */
    eProsima_user_DllExport uint64_t& createdAt()
    {
        return m_createdAt;
    }


    /*!
     * @brief This function sets a value in member modifiedAt
     * @param _modifiedAt New value for member modifiedAt
     */
    eProsima_user_DllExport void modifiedAt(
            uint64_t _modifiedAt)
    {
        m_modifiedAt = _modifiedAt;
    }

    /*!
     * @brief This function returns the value of member modifiedAt
     * @return Value of member modifiedAt
     */
    eProsima_user_DllExport uint64_t modifiedAt() const
    {
        return m_modifiedAt;
    }

    /*!
     * @brief This function returns a reference to member modifiedAt
     * @return Reference to member modifiedAt
     */
    eProsima_user_DllExport uint64_t& modifiedAt()
    {
        return m_modifiedAt;
    }


    /*!
     * @brief This function copies the value in member tenant
     * @param _tenant New value to be copied in member tenant
     */
    eProsima_user_DllExport void tenant(
            const std::string& _tenant)
    {
        m_tenant = _tenant;
    }

    /*!
     * @brief This function moves the value in member tenant
     * @param _tenant New value to be moved in member tenant
     */
    eProsima_user_DllExport void tenant(
            std::string&& _tenant)
    {
        m_tenant = std::move(_tenant);
    }

    /*!
     * @brief This function returns a constant reference to member tenant
     * @return Constant reference to member tenant
     */
    eProsima_user_DllExport const std::string& tenant() const
    {
        return m_tenant;
    }

    /*!
     * @brief This function returns a reference to member tenant
     * @return Reference to member tenant
     */
    eProsima_user_DllExport std::string& tenant()
    {
        return m_tenant;
    }


    /*!
     * @brief This function copies the value in member attributes
     * @param _attributes New value to be copied in member attributes
     */
    eProsima_user_DllExport void attributes(
            const std::string& _attributes)
    {
        m_attributes = _attributes;
    }

    /*!
     * @brief This function moves the value in member attributes
     * @param _attributes New value to be moved in member attributes
     */
    eProsima_user_DllExport void attributes(
            std::string&& _attributes)
    {
        m_attributes = std::move(_attributes);
    }

    /*!
     * @brief This function returns a constant reference to member attributes
     * @return Constant reference to member attributes
     */
    eProsima_user_DllExport const std::string& attributes() const
    {
        return m_attributes;
    }

    /*!
     * @brief This function returns a reference to member attributes
     * @return Reference to member attributes
     */
    eProsima_user_DllExport std::string& attributes()
    {
        return m_attributes;
    }



private:

    std::string m_id;
    std::string m_type;
    std::string m_scope;
    uint64_t m_createdAt{0};
    uint64_t m_modifiedAt{0};
    std::string m_tenant;
    std::string m_attributes;

};

#endif // _FAST_DDS_GENERATED_NGSILDENTITY_HPP_


